<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>梦兽编程</title><link>https://rexai.top/</link><description>Recent content on 梦兽编程</description><generator>Hugo -- 0.148.2</generator><language>en</language><copyright>梦兽编程</copyright><lastBuildDate>Fri, 01 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://rexai.top/index.xml" rel="self" type="application/rss+xml"/><item><title>A Survival Guide to Zig Performance Profiling on Apple Silicon (M1/M2)</title><link>https://rexai.top/news/zig-profiling-on-apple-silicon-survival-guide/</link><pubDate>Fri, 01 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/news/zig-profiling-on-apple-silicon-survival-guide/</guid><description>Performance profiling for Zig on Apple Silicon (M1/M2) can be challenging as common tools like perf and valgrind are not supported. This guide introduces alternatives like Samply, poop, and Tracy to help you analyze and optimize your Zig code on macOS.</description></item><item><title>HTML Speculation Rules API Tutorial: 6 Lines of Code for Instant Page Loads</title><link>https://rexai.top/js-news/html-speculation-rules-instant-page-load-english/</link><pubDate>Fri, 01 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/js-news/html-speculation-rules-instant-page-load-english/</guid><description>Complete guide to HTML5 Speculation Rules API for prefetching and prerendering web pages. Achieve 90% faster page loads with 6 lines of HTML code. Includes Chrome 121+ implementation and cross-browser compatibility solutions.</description></item><item><title>From JS Chaos to TypeScript Zen: A Rust Backend Developer's Epiphany</title><link>https://rexai.top/news/why-backend-devs-should-embrace-typescript-from-a-rust-veteran/</link><pubDate>Wed, 30 Jul 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/news/why-backend-devs-should-embrace-typescript-from-a-rust-veteran/</guid><description>A senior Rust backend developer&amp;#39;s journey from despising JavaScript to embracing TypeScript. Discover why the modern web stack is crucial for backend programmers and how Rust and TypeScript can work together to build rock-solid full-stack applications.</description></item><item><title>Zhipu AI GLM-4.5 Release: New Benchmark Challenging GPT-4's AI Coding Capabilities</title><link>https://rexai.top/news/zhipu-ai-glm-4-5-release-challenges-gpt4-agent-coding-reasoning/</link><pubDate>Tue, 29 Jul 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/news/zhipu-ai-glm-4-5-release-challenges-gpt4-agent-coding-reasoning/</guid><description>Zhipu AI releases GLM-4.5 series models with 355B parameters, surpassing GPT-4.1 in SWE-bench tests, ranking 3rd globally in AI benchmarks, supporting code generation, PPT creation, and full-stack development capabilities.</description></item><item><title>Rust Lifetimes Explained: From 'a Errors to Mastery, Finally Understand the Borrow Checker</title><link>https://rexai.top/tutorials/rust/rust-lifetime-mistakes/</link><pubDate>Thu, 24 Jul 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-lifetime-mistakes/</guid><description>Still struggling with Rust lifetimes? This article uses a humorous and easy-to-understand approach to help you finally grasp the true meaning of &amp;#39;a, avoid the 5 most common pitfalls for beginners, and master Rust&amp;#39;s borrowing and ownership to get ahead of your peers.</description></item><item><title>Alibaba's Qwen3-235B-A22B with 256K Context Goes Live: A New Benchmark in AI</title><link>https://rexai.top/tools/development/qwen3-235b-a22b-256k-context-launch/</link><pubDate>Tue, 22 Jul 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tools/development/qwen3-235b-a22b-256k-context-launch/</guid><description>Alibaba releases the Qwen3-235B-A22B model, supporting a 256K large context and outperforming mainstream AI models like K2, DeepSeek, and Claude, marking a new breakthrough in the AI field.</description></item><item><title>Daily AI Painting Tip: 3D Gradient Icon Style (GPT-4o &amp; Lovart in Practice)</title><link>https://rexai.top/tools/ai-tools/2025-05/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tools/ai-tools/2025-05/</guid><description>This issue of the AI Painting column details how to generate high-quality 3D gradient icons using GPT-4o and Lovart, with detailed prompts and practical tips, suitable for daily advancement of AI artists and UI designers.</description></item><item><title>Rust Ultimate Guide: 5 Trait &amp; Generic Pitfalls That Will Make Your Colleagues 'Unreachable'</title><link>https://rexai.top/tutorials/rust/rust-traits-and-generics-common-mistakes/</link><pubDate>Mon, 27 Jan 2025 10:00:00 +0800</pubDate><guid>https://rexai.top/tutorials/rust/rust-traits-and-generics-common-mistakes/</guid><description>Deep dive into 5 common Rust Traits and Generics pitfalls, from generic overuse, trait constraint chaos, static vs dynamic dispatch confusion, associated types usage to struct constraint abuse. Master elegant and efficient Rust code.</description></item><item><title>Interviewer: How do you test your code? Complete JavaScript Testing &amp; Debugging Guide</title><link>https://rexai.top/js-news/javascript-testing-debugging-guide-for-interview/</link><pubDate>Mon, 27 Jan 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/js-news/javascript-testing-debugging-guide-for-interview/</guid><description>Master JavaScript testing and debugging techniques, from unit testing to E2E testing, from console.log to breakpoint debugging, become a professional developer that impresses interviewers</description></item><item><title>Six Commandments for Building Production-Ready AI Agents: From Rookie to Expert</title><link>https://rexai.top/news/six-commandments-for-production-ai-agents/</link><pubDate>Mon, 27 Jan 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/news/six-commandments-for-production-ai-agents/</guid><description>Master the art of AI Agent development with these six proven principles covering prompt engineering, context management, tool design, and feedback loops for robust AI systems</description></item><item><title>Is React Doomed? Silicon Valley CTOs Are Secretly Jumping Ship...</title><link>https://rexai.top/js-news/react-cto-secret-shift/</link><pubDate>Thu, 19 Dec 2024 10:00:00 +0800</pubDate><guid>https://rexai.top/js-news/react-cto-secret-shift/</guid><description>Revealing why CTOs from 24 top tech companies are abandoning React: an in-depth analysis of five key truths including performance bottlenecks, development efficiency, and talent costs.</description></item><item><title>The Ultimate Guide to Rust Error Handling: Say Goodbye to unwrap() and Master Result and Option</title><link>https://rexai.top/tutorials/rust/rust-error-handling-guide-unwrap-result-option/</link><pubDate>Thu, 19 Dec 2024 10:00:00 +0800</pubDate><guid>https://rexai.top/tutorials/rust/rust-error-handling-guide-unwrap-result-option/</guid><description>A deep dive into Rust&amp;#39;s error handling mechanism, from the pitfalls of unwrap to the elegance of the ? operator. This guide covers core concepts like Result, Option, and panic handling with practical code examples and best practices to help you write safer, more reliable Rust code.</description></item><item><title>Rust Async: 7 Common Mistakes That Kill Performance and Cause Crashes</title><link>https://rexai.top/tutorials/rust/rust-async-common-mistakes-to-avoid/</link><pubDate>Wed, 31 Jul 2024 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-async-common-mistakes-to-avoid/</guid><description>A deep dive into 7 common Rust async programming pitfalls, such as blocking threads, incorrect lock usage, and mishandled Futures. Learn to avoid these mistakes with practical examples to write high-performance, stable asynchronous code.</description></item><item><title>Rust's Infamous Borrow Checker: Not Your Boss, But Your Best Bodyguard</title><link>https://rexai.top/tutorials/rust/rust-borrow-checker-explained-en/</link><pubDate>Fri, 26 Jul 2024 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-borrow-checker-explained-en/</guid><description>A deep but simple dive into Rust&amp;#39;s core concept: the Borrow Checker. Using a vivid analogy, this article explains ownership, borrowing, and lifetimes, helping you conquer compile errors and master Rust&amp;#39;s safety.</description></item><item><title>Bun vs Rust Performance Showdown: The Newcomer vs The Veteran</title><link>https://rexai.top/js-news/bun-vs-rust-performance-battle/</link><pubDate>Mon, 22 Jul 2024 13:37:00 +0800</pubDate><guid>https://rexai.top/js-news/bun-vs-rust-performance-battle/</guid><description>Which is faster, Bun or Rust? This article uses a real-world URL shortener service benchmark to compare Bun (Elysia) and Rust (Actix) in throughput, latency, and developer experience, helping you choose the right tech stack.</description></item><item><title>Complete Guide to Rust Smart Pointers: Master Box, Rc, and RefCell for Memory Management</title><link>https://rexai.top/tutorials/rust/rust-smart-pointers-explained-fun-way/</link><pubDate>Mon, 15 Jan 2024 10:00:00 +0800</pubDate><guid>https://rexai.top/tutorials/rust/rust-smart-pointers-explained-fun-way/</guid><description>Learn Rust smart pointers through vivid analogies and practical examples. Master Box, Rc, and RefCell to understand Rust&amp;#39;s memory management system effortlessly</description></item></channel></rss>