<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>梦兽编程</title><link>https://rexai.top/</link><description>Recent content on 梦兽编程</description><generator>Hugo -- 0.148.2</generator><language>zh-cn</language><copyright>梦兽编程</copyright><lastBuildDate>Mon, 18 Aug 2025 00:00:00 +0800</lastBuildDate><atom:link href="https://rexai.top/index.xml" rel="self" type="application/rss+xml"/><item><title>3 步 0 成本接入 2000 tokens/s 模型，让 Claude Code 起飞（Cerebras × Cloudflare）</title><link>https://rexai.top/tools/ai-tools/claude-code-zero-cost-supercharge/</link><pubDate>Mon, 18 Aug 2025 00:00:00 +0800</pubDate><guid>https://rexai.top/tools/ai-tools/claude-code-zero-cost-supercharge/</guid><description>用 Cloudflare Workers + run.claw.cloud + Cerebras 免费额度，搭一条 OpenAI 兼容通道，让 Claude Code 秒连、推理飞快，成本接近 0。附安装命令、网关配置、常见报错与优化建议。</description></item><item><title>Rust Axum 异步微服务实战：任务队列、重试机制与优雅关闭</title><link>https://rexai.top/tutorials/rust/rust-axum-async-microservice-guide/</link><pubDate>Sun, 17 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-axum-async-microservice-guide/</guid><description>从零搭建基于 Rust Axum 的异步微服务：任务队列、后台 worker、指数退避重试与优雅关闭，配完整项目结构与 Docker 部署示例，助你稳定应对高并发。</description></item><item><title>Rust Axum 优雅停机终极指南：99% 程序员都踩过的坑，这次彻底解决</title><link>https://rexai.top/tutorials/rust/rust-axum-graceful-shutdown-guide/</link><pubDate>Sun, 17 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-axum-graceful-shutdown-guide/</guid><description>一文吃透 Rust Axum 优雅停机：监听 SIGINT/SIGTERM、with_graceful_shutdown 拒绝新连接、CancellationToken 终止后台任务、设置超时、对接 Docker/Kubernetes 的停机流程，保障数据安全与用户体验。</description></item><item><title>Claude Code Output Styles深度解析：如何自定义AI编程助手的人格与风格</title><link>https://rexai.top/tools/ai-tools/output-styles-custom-ai-persona/</link><pubDate>Sat, 16 Aug 2025 12:00:00 +0800</pubDate><guid>https://rexai.top/tools/ai-tools/output-styles-custom-ai-persona/</guid><description>学习如何使用Claude Code最新的Output Styles功能，通过自定义System Prompt，将你的AI编程助手调教成资深架构师、TDD教练或任何你需要的角色。从预设人格到创造专属AI，本文为你提供详细指南和实战案例。</description></item><item><title>Claude Code Tamagotchi：你的 VSCode 编程电子宠物与 AI 代码伙伴</title><link>https://rexai.top/tools/ai-tools/claude-code-tamagotchi-your-ai-coding-buddy/</link><pubDate>Fri, 15 Aug 2025 10:00:00 +0800</pubDate><guid>https://rexai.top/tools/ai-tools/claude-code-tamagotchi-your-ai-coding-buddy/</guid><description>把编程变成一场养成游戏：Claude Code Tamagotchi 住进 VSCode 状态栏，基于你真实的编码行为生成情绪与反馈，提供陪伴感与温柔提醒。内含 3 分钟上手指南（npm/bun）、状态存档与交互命令。</description></item><item><title>Rust + Axum = 王炸？手把手教你用“乐高”模式搭建高性能 Web 服务器！</title><link>https://rexai.top/tutorials/rust/axum-from-zero-to-hero-tutorial/</link><pubDate>Thu, 14 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/axum-from-zero-to-hero-tutorial/</guid><description>从 0 到 1 用 Axum 搭建现代高性能 Web 服务：路由、路径参数、查询参数、JSON、共享状态与中间件（日志、CORS），配完整代码示例与最佳实践。</description></item><item><title>Rust 的 unsafe 不是“随便玩玩”，而是生死状：6 个让你代码原地爆炸的骚操作</title><link>https://rexai.top/tutorials/rust/rust-unsafe-yolo-sao-cao-zuo/</link><pubDate>Wed, 13 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-unsafe-yolo-sao-cao-zuo/</guid><description>别把 unsafe 当成免死金牌！本文以实战示例拆解 6 个最常见的 unsafe 误用场景：把它当胶带封编译器嘴、乱解引用裸指针、在 unsafe 里违反借用检查、重复造轮子、滥用 unsafe impl 以及缺少 Safety 注释，让你建立正确的风险意识与使用范式。</description></item><item><title>2025 独立开发者“穷鬼套餐”：AI 编程省钱秘笈与 0 成本 Web 部署（含 DeepSeek R1 0528、Gemini 2.5、Qwen3 热点）</title><link>https://rexai.top/tools/ai-tools/ai-programming-web-deploy-free-guide-2025/</link><pubDate>Tue, 12 Aug 2025 00:00:00 +0800</pubDate><guid>https://rexai.top/tools/ai-tools/ai-programming-web-deploy-free-guide-2025/</guid><description>2025 热点：DeepSeek R1 0528、Gemini 2.5、Qwen3 等免费/低成本 AI 编程组合 + Vercel/Cloudflare Pages/Workers 等 0 成本 Web 部署完整攻略，独立开发者“穷鬼套餐”实战指南。</description></item><item><title>别再把 tokio::spawn 当线程了！我用它2秒启动1000个任务，系统竟然毫无压力</title><link>https://rexai.top/tutorials/rust/tokio-spawn-is-not-a-thread/</link><pubDate>Mon, 11 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/tokio-spawn-is-not-a-thread/</guid><description>tokio::spawn 并不是线程，而是轻量任务。在 Tokio 的调度下通过 sleep、timeout 和 select 构建高并发服务：2 秒内轻松调度 1000 个任务而系统毫无压力。</description></item><item><title>JavaScript 字符串 substr() 已被废弃：为什么会踩坑？最清晰替代指南（slice/substring）</title><link>https://rexai.top/js-news/javascript-substr-deprecated-pitfall/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/js-news/javascript-substr-deprecated-pitfall/</guid><description>别再用 substr() 了！该 API 已被标准废弃且存在兼容性隐患。本文用通俗实例对比 slice() 与 substring()，提供迁移清单与最佳实践，帮你快速无痛替换。</description></item><item><title>Rust async 状态机揭秘：Future、poll、Waker 到底怎么工作？</title><link>https://rexai.top/tutorials/rust/how-rust-async-state-machine-works-under-the-hood/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/how-rust-async-state-machine-works-under-the-hood/</guid><description>深入拆解 Rust 异步编程：为什么调用 async 不会立刻执行？Future 本质是怎样的状态机？执行器如何通过 poll 与 Waker 驱动任务前进？一文读懂 async/await 的底层运行机制。</description></item><item><title>Rust 1.89 发布：Intel Mac 平台降级，编译器新增生命周期可读性提示</title><link>https://rexai.top/tutorials/rust/rust-1-89-intel-mac-demotion-20250809/</link><pubDate>Sat, 09 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-1-89-intel-mac-demotion-20250809/</guid><description>Rust 1.89 宣布 x86_64-apple-darwin（Intel Mac）从 Tier 1 降级为 Tier 2，并引入 mismatched_lifetime_syntaxes lint、常量泛型 &amp;#39;_&amp;#39; 推断与新 x86 指令集支持，全面提升可读性与性能。</description></item><item><title>GPT-5深夜炸场：价格屠杀、代码封神，但我们等来的只是一辆“半成品”的法拉利？</title><link>https://rexai.top/tools/ai-tools/gpt-5-launch-price-massacre-coding-god-or-halffinished-ferrari/</link><pubDate>Fri, 08 Aug 2025 10:00:00 +0800</pubDate><guid>https://rexai.top/tools/ai-tools/gpt-5-launch-price-massacre-coding-god-or-halffinished-ferrari/</guid><description>OpenAI 发布 GPT-5：史诗级降价与编程能力全面升级，但多模态能力缺席，引发‘性能猛兽但功能未完备’的争议。本文解析价格战、Agentic Coding、自我修复与长文本等核心看点。</description></item><item><title>别再复制粘贴了！这个叫 Cursor CLI 的“怪物”让你在终端里和 AI 并肩作战。</title><link>https://rexai.top/news/cursor-cli-the-ai-coding-genie-for-your-terminal/</link><pubDate>Fri, 08 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/news/cursor-cli-the-ai-coding-genie-for-your-terminal/</guid><description>告别在浏览器与终端之间来回切换！Cursor CLI 将强大的 AI Agent 注入命令行，支持聊天式生成代码、文件读写、代码审查与自动化集成（CI/CD），帮助开发者在 SSH、Vim/Neovim、本地或远程环境下保持心流、显著提升开发效率。</description></item><item><title>Claude Code限流真相：200美元无限套餐变限量供应</title><link>https://rexai.top/tools/ai-tools/claude-code-unlimited-plan-is-a-joke/</link><pubDate>Thu, 07 Aug 2025 10:00:00 +0800</pubDate><guid>https://rexai.top/tools/ai-tools/claude-code-unlimited-plan-is-a-joke/</guid><description>Anthropic对Claude Code实施限流政策，200美元无限套餐用户受影响。深度分析AI服务限流原因、对开发者的影响及行业趋势，揭示AI\&amp;#34;无限使用\&amp;#34;背后的真相。</description></item><item><title>LocalStorage 终极指南：5个致命陷阱，99%开发者踩过坑</title><link>https://rexai.top/js-news/localstorage-5-secrets-every-developer-must-know/</link><pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/js-news/localstorage-5-secrets-every-developer-must-know/</guid><description>深度解析 LocalStorage 的5个关键缺陷：同步阻塞、跨窗口通信、数据类型限制、存储容量限制、安全隐患。包含实战代码示例和最佳实践。</description></item><item><title>Apple Silicon (M1/M2) 上 Zig 性能分析生存指南</title><link>https://rexai.top/news/zig-profiling-on-apple-silicon-survival-guide/</link><pubDate>Fri, 01 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/news/zig-profiling-on-apple-silicon-survival-guide/</guid><description>在 Apple Silicon (M1/M2) 上进行 Zig 性能分析可能会遇到困难，因为 perf、valgrind 等常用工具不受支持。本指南介绍了一些替代工具，如 Samply、poop 和 Tracy，帮助您在 macOS 上分析和优化 Zig 代码。</description></item><item><title>HTML推测规则(Speculation Rules)实战指南：通过预取和预渲染实现即时页面加载</title><link>https://rexai.top/js-news/html-speculation-rules-instant-page-load/</link><pubDate>Fri, 01 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/js-news/html-speculation-rules-instant-page-load/</guid><description>详解HTML5推测规则API，用6行代码实现网页预加载和预渲染，让网站加载速度提升90%。包含Chrome Speculation Rules完整配置和兼容性解决方案。</description></item><item><title>Rust后端开发者必读：为何拥抱TypeScript是你的下一个超能力</title><link>https://rexai.top/news/why-backend-devs-should-embrace-typescript-from-a-rust-veteran/</link><pubDate>Wed, 30 Jul 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/news/why-backend-devs-should-embrace-typescript-from-a-rust-veteran/</guid><description>一个资深Rust后端开发者，从鄙视JS到拥抱TypeScript的心路历程。探讨Rust与TypeScript如何通过ts-rs等工具协同，打造类型安全、坚不可摧的全栈应用。</description></item><item><title>智谱GLM-4.5发布：挑战GPT-4的AI代码能力新标杆</title><link>https://rexai.top/news/zhipu-ai-glm-4-5-release-challenges-gpt4-agent-coding-reasoning/</link><pubDate>Tue, 29 Jul 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/news/zhipu-ai-glm-4-5-release-challenges-gpt4-agent-coding-reasoning/</guid><description>智谱AI发布GLM-4.5系列模型，拥有3550亿参数，在SWE-bench测试中超越GPT-4.1，全球AI排名第三，支持代码生成、PPT制作、网站开发等全栈能力。</description></item><item><title>5个常见的Rust生命周期错误及其修复方案</title><link>https://rexai.top/tutorials/rust/rust-lifetime-mistakes/</link><pubDate>Thu, 24 Jul 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-lifetime-mistakes/</guid><description>还在死磕 Rust 生命周期？本文用幽默易懂的方式，带你彻底搞懂 &amp;#39;a 的真正含义，避开新手最常踩的5个天坑，让你轻松掌握 Rust 的借用和所有权，悄悄卷赢所有同事。</description></item><item><title>阿里巴巴Qwen3-235B-A22B 256K大context上线：AI界新标杆</title><link>https://rexai.top/tools/development/qwen3-235b-a22b-256k-context-launch/</link><pubDate>Tue, 22 Jul 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tools/development/qwen3-235b-a22b-256k-context-launch/</guid><description>阿里巴巴发布Qwen3-235B-A22B模型，支持256K大context，性能超越K2、DeepSeek、Claude等主流AI模型，AI界迎来新突破。</description></item><item><title>每日AI绘画技巧：3D渐变图标风格（GPT-4o &amp; Lovart 实战）</title><link>https://rexai.top/tools/ai-tools/2025-05/</link><pubDate>Tue, 01 Jul 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tools/ai-tools/2025-05/</guid><description>本期AI绘画专栏，详解如何用GPT-4o与Lovart生成高质量3D渐变图标，附详细提示词和实用经验，适合AI美术、UI设计师每日进阶。</description></item><item><title>Rust内卷终极指南：5个让同事高攀不起的Trait与泛型骚操作</title><link>https://rexai.top/tutorials/rust/rust-traits-and-generics-common-mistakes/</link><pubDate>Mon, 27 Jan 2025 10:00:00 +0800</pubDate><guid>https://rexai.top/tutorials/rust/rust-traits-and-generics-common-mistakes/</guid><description>深入解析Rust中Traits和Generics的5个常见陷阱，从泛型滥用、Trait约束混乱、静态动态分发混淆、关联类型使用到结构体约束滥用，帮你写出更优雅高效的Rust代码</description></item><item><title>AI Agent开发实战指南：从新兵到兵王的六条黄金法则</title><link>https://rexai.top/news/six-commandments-for-production-ai-agents/</link><pubDate>Mon, 27 Jan 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/news/six-commandments-for-production-ai-agents/</guid><description>深入探讨AI Agent开发的核心技巧，包括Prompt工程、上下文管理、工具设计、反馈循环等关键要素，助你快速掌握AI Agent开发精髓</description></item><item><title>JavaScript测试与调试终极指南：从单元测试到E2E，成为面试杀手</title><link>https://rexai.top/js-news/javascript-testing-debugging-guide-for-interview/</link><pubDate>Mon, 27 Jan 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/js-news/javascript-testing-debugging-guide-for-interview/</guid><description>掌握JavaScript测试与调试技巧，从单元测试到E2E测试，从console.log到断点调试，成为让面试官刮目相看的专业开发者</description></item><item><title>React性能瓶颈与未来：为何硅谷CTO们正从React转向Svelte/Solid/Astro</title><link>https://rexai.top/js-news/react-cto-secret-shift/</link><pubDate>Thu, 19 Dec 2024 10:00:00 +0800</pubDate><guid>https://rexai.top/js-news/react-cto-secret-shift/</guid><description>揭秘24家顶级科技公司CTO为何集体叛逃React，深度分析性能瓶颈、开发效率、人才成本等五大真相</description></item><item><title>Rust错误处理指南：精通Result、Option与unwrap/expect</title><link>https://rexai.top/tutorials/rust/rust-error-handling-guide-unwrap-result-option/</link><pubDate>Thu, 19 Dec 2024 10:00:00 +0800</pubDate><guid>https://rexai.top/tutorials/rust/rust-error-handling-guide-unwrap-result-option/</guid><description>深度解析 Rust 错误处理机制，从 unwrap 的陷阱到 ? 操作符的优雅，详细讲解 Result、Option、panic 处理等核心概念，包含实战代码示例和最佳实践，助你写出更安全可靠的 Rust 代码</description></item><item><title>Rust异步编程：7个导致性能瓶颈和崩溃的常见错误</title><link>https://rexai.top/tutorials/rust/rust-async-common-mistakes-to-avoid/</link><pubDate>Wed, 31 Jul 2024 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-async-common-mistakes-to-avoid/</guid><description>深入探讨7个常见的Rust异步编程陷阱，如阻塞线程、错误使用锁和未处理的Future。通过实例学习如何避免这些错误，编写高性能、稳定的异步代码。</description></item><item><title>Rust 迭代器懒惰陷阱：代码不执行的 3 大常见原因</title><link>https://rexai.top/tutorials/rust/rust-iterator-lazy-common-mistakes-explained/</link><pubDate>Fri, 26 Jul 2024 12:01:00 +0800</pubDate><guid>https://rexai.top/tutorials/rust/rust-iterator-lazy-common-mistakes-explained/</guid><description>揭秘 Rust 迭代器 3 大懒惰陷阱：map 不执行、过度 collect、into_iter 所有权问题。掌握迭代器最佳实践，避免新手常见错误，写出高性能 Rust 代码。</description></item><item><title>Rust借用检查器详解：所有权、借用与生命周期入门指南</title><link>https://rexai.top/tutorials/rust/rust-borrow-checker-explained-zh/</link><pubDate>Fri, 26 Jul 2024 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-borrow-checker-explained-zh/</guid><description>深入浅出理解Rust核心概念——借用检查器（Borrow Checker）。本文用生动的比喻，解释所有权、借用、生命周期，让你不再畏惧编译错误，真正掌握Rust的安全之道。</description></item><item><title>Bun (Elysia) vs Rust (Actix) 性能实测：新贵与老炮的极限对决</title><link>https://rexai.top/js-news/bun-vs-rust-performance-battle/</link><pubDate>Mon, 22 Jul 2024 13:37:00 +0800</pubDate><guid>https://rexai.top/js-news/bun-vs-rust-performance-battle/</guid><description>Bun 和 Rust 谁更快？本篇用真实短链服务性能测试，详细对比 Bun（Elysia）与 Rust（Actix）在吞吐量、延迟、开发体验等方面的优劣，助你选对技术栈。</description></item><item><title>Rust智能指针详解：Box、Rc与RefCell的实用指南</title><link>https://rexai.top/tutorials/rust/rust-smart-pointers-explained-fun-way/</link><pubDate>Mon, 15 Jan 2024 10:00:00 +0800</pubDate><guid>https://rexai.top/tutorials/rust/rust-smart-pointers-explained-fun-way/</guid><description>通过生动的比喻和实例，深入浅出地讲解Rust智能指针Box、Rc、RefCell的使用场景和区别，让你轻松掌握Rust内存管理精髓</description></item><item><title>Rust Async内幕：让代码学会摸鱼，效率还能翻倍的秘密！</title><link>https://rexai.top/tutorials/rust/rust-async-like-a-pro-explained/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-async-like-a-pro-explained/</guid><description>深入解析Rust异步编程的核心概念，从async/await到Future，从tokio运行时到并发处理，掌握零成本异步编程的精髓，让你的Rust代码效率翻倍！</description></item><item><title>Rust并发编程指南：精通Arc、Mutex与Channel，实现线程安全</title><link>https://rexai.top/tutorials/rust/rust-concurrency-made-easy-with-arc-mutex-channel/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-concurrency-made-easy-with-arc-mutex-channel/</guid><description>深入理解Rust并发编程的核心概念：Arc原子引用计数、Mutex互斥锁、Channel通道通信。通过生动的比喻和实际代码示例，掌握线程安全的并发编程技巧。</description></item></channel></rss>