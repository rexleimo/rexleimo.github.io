<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Rust on 梦兽编程</title><link>https://rexai.top/categories/rust/</link><description>Recent content in Rust on 梦兽编程</description><generator>Hugo -- 0.148.2</generator><language>zh-cn</language><copyright>梦兽编程</copyright><lastBuildDate>Thu, 21 Aug 2025 10:00:00 +0800</lastBuildDate><atom:link href="https://rexai.top/categories/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust 异步微服务扛洪攻略：限流、背压、批处理、中间件一站讲透</title><link>https://rexai.top/tutorials/rust/rust-async-microservices-traffic-gates-20250820/</link><pubDate>Wed, 20 Aug 2025 10:00:00 +0800</pubDate><guid>https://rexai.top/tutorials/rust/rust-async-microservices-traffic-gates-20250820/</guid><description>当流量像洪水一样涌来时，用 Rust + Tokio + Tower 给你的微服务装上四道闸门：限流、背压、批处理、中间件。稳住 P99，让快有序发生。</description></item><item><title>Rust Axum 异步微服务实战：任务队列、重试机制与优雅关闭</title><link>https://rexai.top/tutorials/rust/rust-axum-async-microservice-guide/</link><pubDate>Sun, 17 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-axum-async-microservice-guide/</guid><description>从零搭建基于 Rust Axum 的异步微服务：任务队列、后台 worker、指数退避重试与优雅关闭，配完整项目结构与 Docker 部署示例，助你稳定应对高并发。</description></item><item><title>Rust Axum 优雅停机终极指南：99% 程序员都踩过的坑，这次彻底解决</title><link>https://rexai.top/tutorials/rust/rust-axum-graceful-shutdown-guide/</link><pubDate>Sun, 17 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-axum-graceful-shutdown-guide/</guid><description>一文吃透 Rust Axum 优雅停机：监听 SIGINT/SIGTERM、with_graceful_shutdown 拒绝新连接、CancellationToken 终止后台任务、设置超时、对接 Docker/Kubernetes 的停机流程，保障数据安全与用户体验。</description></item><item><title>Rust + Axum = 王炸？手把手教你用“乐高”模式搭建高性能 Web 服务器！</title><link>https://rexai.top/tutorials/rust/axum-from-zero-to-hero-tutorial/</link><pubDate>Thu, 14 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/axum-from-zero-to-hero-tutorial/</guid><description>从 0 到 1 用 Axum 搭建现代高性能 Web 服务：路由、路径参数、查询参数、JSON、共享状态与中间件（日志、CORS），配完整代码示例与最佳实践。</description></item><item><title>Rust 的 unsafe 不是“随便玩玩”，而是生死状：6 个让你代码原地爆炸的骚操作</title><link>https://rexai.top/tutorials/rust/rust-unsafe-yolo-sao-cao-zuo/</link><pubDate>Wed, 13 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-unsafe-yolo-sao-cao-zuo/</guid><description>别把 unsafe 当成免死金牌！本文以实战示例拆解 6 个最常见的 unsafe 误用场景：把它当胶带封编译器嘴、乱解引用裸指针、在 unsafe 里违反借用检查、重复造轮子、滥用 unsafe impl 以及缺少 Safety 注释，让你建立正确的风险意识与使用范式。</description></item><item><title>别再把 tokio::spawn 当线程了！我用它2秒启动1000个任务，系统竟然毫无压力</title><link>https://rexai.top/tutorials/rust/tokio-spawn-is-not-a-thread/</link><pubDate>Mon, 11 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/tokio-spawn-is-not-a-thread/</guid><description>tokio::spawn 并不是线程，而是轻量任务。在 Tokio 的调度下通过 sleep、timeout 和 select 构建高并发服务：2 秒内轻松调度 1000 个任务而系统毫无压力。</description></item><item><title>Rust async 状态机揭秘：Future、poll、Waker 到底怎么工作？</title><link>https://rexai.top/tutorials/rust/how-rust-async-state-machine-works-under-the-hood/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/how-rust-async-state-machine-works-under-the-hood/</guid><description>深入拆解 Rust 异步编程：为什么调用 async 不会立刻执行？Future 本质是怎样的状态机？执行器如何通过 poll 与 Waker 驱动任务前进？一文读懂 async/await 的底层运行机制。</description></item><item><title>Rust 1.89 发布：Intel Mac 平台降级，编译器新增生命周期可读性提示</title><link>https://rexai.top/tutorials/rust/rust-1-89-intel-mac-demotion-20250809/</link><pubDate>Sat, 09 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-1-89-intel-mac-demotion-20250809/</guid><description>Rust 1.89 宣布 x86_64-apple-darwin（Intel Mac）从 Tier 1 降级为 Tier 2，并引入 mismatched_lifetime_syntaxes lint、常量泛型 &amp;#39;_&amp;#39; 推断与新 x86 指令集支持，全面提升可读性与性能。</description></item><item><title>Rust内卷终极指南：5个让同事高攀不起的Trait与泛型骚操作</title><link>https://rexai.top/tutorials/rust/rust-traits-and-generics-common-mistakes/</link><pubDate>Mon, 27 Jan 2025 10:00:00 +0800</pubDate><guid>https://rexai.top/tutorials/rust/rust-traits-and-generics-common-mistakes/</guid><description>深入解析Rust中Traits和Generics的5个常见陷阱，从泛型滥用、Trait约束混乱、静态动态分发混淆、关联类型使用到结构体约束滥用，帮你写出更优雅高效的Rust代码</description></item><item><title>Rust智能指针详解：Box、Rc与RefCell的实用指南</title><link>https://rexai.top/tutorials/rust/rust-smart-pointers-explained-fun-way/</link><pubDate>Mon, 15 Jan 2024 10:00:00 +0800</pubDate><guid>https://rexai.top/tutorials/rust/rust-smart-pointers-explained-fun-way/</guid><description>通过生动的比喻和实例，深入浅出地讲解Rust智能指针Box、Rc、RefCell的使用场景和区别，让你轻松掌握Rust内存管理精髓</description></item><item><title>Rust Async内幕：让代码学会摸鱼，效率还能翻倍的秘密！</title><link>https://rexai.top/tutorials/rust/rust-async-like-a-pro-explained/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-async-like-a-pro-explained/</guid><description>深入解析Rust异步编程的核心概念，从async/await到Future，从tokio运行时到并发处理，掌握零成本异步编程的精髓，让你的Rust代码效率翻倍！</description></item><item><title>Rust并发编程指南：精通Arc、Mutex与Channel，实现线程安全</title><link>https://rexai.top/tutorials/rust/rust-concurrency-made-easy-with-arc-mutex-channel/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-concurrency-made-easy-with-arc-mutex-channel/</guid><description>深入理解Rust并发编程的核心概念：Arc原子引用计数、Mutex互斥锁、Channel通道通信。通过生动的比喻和实际代码示例，掌握线程安全的并发编程技巧。</description></item></channel></rss>