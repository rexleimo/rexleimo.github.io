<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Rust 教程 on 梦兽编程</title><link>https://rexai.top/tutorials/rust/</link><description>Recent content in Rust 教程 on 梦兽编程</description><generator>Hugo -- 0.148.2</generator><language>zh-cn</language><copyright>梦兽编程</copyright><lastBuildDate>Mon, 11 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://rexai.top/tutorials/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>别再把 tokio::spawn 当线程了！我用它2秒启动1000个任务，系统竟然毫无压力</title><link>https://rexai.top/tutorials/rust/tokio-spawn-is-not-a-thread/</link><pubDate>Mon, 11 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/tokio-spawn-is-not-a-thread/</guid><description>tokio::spawn 并不是线程，而是轻量任务。在 Tokio 的调度下通过 sleep、timeout 和 select 构建高并发服务：2 秒内轻松调度 1000 个任务而系统毫无压力。</description></item><item><title>Rust async 状态机揭秘：Future、poll、Waker 到底怎么工作？</title><link>https://rexai.top/tutorials/rust/how-rust-async-state-machine-works-under-the-hood/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/how-rust-async-state-machine-works-under-the-hood/</guid><description>深入拆解 Rust 异步编程：为什么调用 async 不会立刻执行？Future 本质是怎样的状态机？执行器如何通过 poll 与 Waker 驱动任务前进？一文读懂 async/await 的底层运行机制。</description></item><item><title>Rust 1.89 发布：Intel Mac 平台降级，编译器新增生命周期可读性提示</title><link>https://rexai.top/tutorials/rust/rust-1-89-intel-mac-demotion-20250809/</link><pubDate>Sat, 09 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-1-89-intel-mac-demotion-20250809/</guid><description>Rust 1.89 宣布 x86_64-apple-darwin（Intel Mac）从 Tier 1 降级为 Tier 2，并引入 mismatched_lifetime_syntaxes lint、常量泛型 &amp;#39;_&amp;#39; 推断与新 x86 指令集支持，全面提升可读性与性能。</description></item><item><title>5个常见的Rust生命周期错误及其修复方案</title><link>https://rexai.top/tutorials/rust/rust-lifetime-mistakes/</link><pubDate>Thu, 24 Jul 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-lifetime-mistakes/</guid><description>还在死磕 Rust 生命周期？本文用幽默易懂的方式，带你彻底搞懂 &amp;#39;a 的真正含义，避开新手最常踩的5个天坑，让你轻松掌握 Rust 的借用和所有权，悄悄卷赢所有同事。</description></item><item><title>Rust内卷终极指南：5个让同事高攀不起的Trait与泛型骚操作</title><link>https://rexai.top/tutorials/rust/rust-traits-and-generics-common-mistakes/</link><pubDate>Mon, 27 Jan 2025 10:00:00 +0800</pubDate><guid>https://rexai.top/tutorials/rust/rust-traits-and-generics-common-mistakes/</guid><description>深入解析Rust中Traits和Generics的5个常见陷阱，从泛型滥用、Trait约束混乱、静态动态分发混淆、关联类型使用到结构体约束滥用，帮你写出更优雅高效的Rust代码</description></item><item><title>Rust错误处理指南：精通Result、Option与unwrap/expect</title><link>https://rexai.top/tutorials/rust/rust-error-handling-guide-unwrap-result-option/</link><pubDate>Thu, 19 Dec 2024 10:00:00 +0800</pubDate><guid>https://rexai.top/tutorials/rust/rust-error-handling-guide-unwrap-result-option/</guid><description>深度解析 Rust 错误处理机制，从 unwrap 的陷阱到 ? 操作符的优雅，详细讲解 Result、Option、panic 处理等核心概念，包含实战代码示例和最佳实践，助你写出更安全可靠的 Rust 代码</description></item><item><title>Rust异步编程：7个导致性能瓶颈和崩溃的常见错误</title><link>https://rexai.top/tutorials/rust/rust-async-common-mistakes-to-avoid/</link><pubDate>Wed, 31 Jul 2024 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-async-common-mistakes-to-avoid/</guid><description>深入探讨7个常见的Rust异步编程陷阱，如阻塞线程、错误使用锁和未处理的Future。通过实例学习如何避免这些错误，编写高性能、稳定的异步代码。</description></item><item><title>Rust 迭代器懒惰陷阱：代码不执行的 3 大常见原因</title><link>https://rexai.top/tutorials/rust/rust-iterator-lazy-common-mistakes-explained/</link><pubDate>Fri, 26 Jul 2024 12:01:00 +0800</pubDate><guid>https://rexai.top/tutorials/rust/rust-iterator-lazy-common-mistakes-explained/</guid><description>揭秘 Rust 迭代器 3 大懒惰陷阱：map 不执行、过度 collect、into_iter 所有权问题。掌握迭代器最佳实践，避免新手常见错误，写出高性能 Rust 代码。</description></item><item><title>Rust借用检查器详解：所有权、借用与生命周期入门指南</title><link>https://rexai.top/tutorials/rust/rust-borrow-checker-explained-zh/</link><pubDate>Fri, 26 Jul 2024 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-borrow-checker-explained-zh/</guid><description>深入浅出理解Rust核心概念——借用检查器（Borrow Checker）。本文用生动的比喻，解释所有权、借用、生命周期，让你不再畏惧编译错误，真正掌握Rust的安全之道。</description></item><item><title>Rust智能指针详解：Box、Rc与RefCell的实用指南</title><link>https://rexai.top/tutorials/rust/rust-smart-pointers-explained-fun-way/</link><pubDate>Mon, 15 Jan 2024 10:00:00 +0800</pubDate><guid>https://rexai.top/tutorials/rust/rust-smart-pointers-explained-fun-way/</guid><description>通过生动的比喻和实例，深入浅出地讲解Rust智能指针Box、Rc、RefCell的使用场景和区别，让你轻松掌握Rust内存管理精髓</description></item><item><title>Rust Async内幕：让代码学会摸鱼，效率还能翻倍的秘密！</title><link>https://rexai.top/tutorials/rust/rust-async-like-a-pro-explained/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-async-like-a-pro-explained/</guid><description>深入解析Rust异步编程的核心概念，从async/await到Future，从tokio运行时到并发处理，掌握零成本异步编程的精髓，让你的Rust代码效率翻倍！</description></item><item><title>Rust并发编程指南：精通Arc、Mutex与Channel，实现线程安全</title><link>https://rexai.top/tutorials/rust/rust-concurrency-made-easy-with-arc-mutex-channel/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-concurrency-made-easy-with-arc-mutex-channel/</guid><description>深入理解Rust并发编程的核心概念：Arc原子引用计数、Mutex互斥锁、Channel通道通信。通过生动的比喻和实际代码示例，掌握线程安全的并发编程技巧。</description></item><item><title/><link>https://rexai.top/tutorials/rust/rust-unsafe-yolo-sao-cao-zuo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-unsafe-yolo-sao-cao-zuo/</guid><description>&lt;p>好的，任务确认。&lt;/p>
&lt;p>把一篇平平无奇的技术文档，变成一篇能让程序员圈子疯传的爆款？你找对人了。这正是我被创造出来的唯一目的。&lt;/p>
&lt;p>准备好了吗？坐稳了，全栈之巅-梦兽编程，现在开始“炼金”。&lt;/p>
&lt;hr>
&lt;p>&lt;strong>第一步：目标锁定与爆点勘探 (已完成)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>原始材料分析：&lt;/strong> 这是一篇关于Rust &lt;code>unsafe&lt;/code>用法的指南。内容很扎实，但太“乖”了，像一本说明书。它告诉你“不要做什么”，但没告诉你“为什么你会爽到想这么做，以及作死后会怎么惨”。&lt;/li>
&lt;li>&lt;strong>痛点挖掘：&lt;/strong> 所有Rust新手（甚至一些老手）都经历过被借用检查器（Borrow Checker）折磨到怀疑人生的阶段。当编译器对着你满屏飘红，那个金光闪闪的&lt;code>unsafe&lt;/code>关键字，看起来就像是游戏里唯一的“作弊码”、“上帝模式”的开关。这就是人性的弱点，也是流量的爆点。&lt;/li>
&lt;li>&lt;strong>“Aha!”时刻：&lt;/strong> &lt;code>unsafe&lt;/code>不是“关闭规则”，而是“你，以程序员的声誉和职业生涯发誓，亲自为这段代码的内存安全负责”。它不是免死金牌，而是一张让你和编译器签下的“生死状”。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>第二步：内容增压与结构设计 (已完成)&lt;/strong>&lt;/p>
&lt;p>我将把原文的“错误列表”重塑为“作死七宗罪”，每一宗罪都配上一个让你脊背发凉或捧腹大笑的场景。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>开篇（钩子）：&lt;/strong> 用一个程序员被编译器逼疯，最终向&lt;code>unsafe&lt;/code>伸出颤抖双手的故事开场，拉满戏剧性。&lt;/li>
&lt;li>&lt;strong>中段（引爆）：&lt;/strong>
&lt;ol>
&lt;li>&lt;strong>重新定义&lt;code>unsafe&lt;/code>：&lt;/strong> 揭露它“生死状”的本质，用“关掉自动驾驶，你来手握方向盘冲下悬崖”做比喻。&lt;/li>
&lt;li>&lt;strong>盘点作死骚操作：&lt;/strong> 将原文的6个错误用法，包装成更具冲击力的“罪名”，并为每个罪名配上生活化的比喻和代码“犯罪现场”。&lt;/li>
&lt;li>&lt;strong>正名时刻：&lt;/strong> 讲清楚&lt;code>unsafe&lt;/code>的真正用武之地（FFI、底层优化），证明我不是无脑黑，而是懂其精髓的“大法师”。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;strong>结尾（升华）：&lt;/strong> 总结&lt;code>unsafe&lt;/code>是“屠龙之技”，而非“切菜小刀”。强调能力与责任的平衡，最后留下行动号召。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>第三步：标题锻造 (已完成)&lt;/strong>&lt;/p>
&lt;p>我为你准备了5个“流量炸弹”标题，你来选一个：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Rust的&lt;code>unsafe&lt;/code>不是“随便玩玩”，而是“生死状”！盘点6个让你代码原地爆炸的骚操作&lt;/strong> (冲突+数字+悬念)&lt;/li>
&lt;li>别再把&lt;code>unsafe&lt;/code>当“免死金牌”了！Rust老鸟揭秘：99%的“不安全”用法都是在自掘坟墓 (利益点+数字+冲突)&lt;/li>
&lt;li>“闭嘴，编译器！” 当&lt;code>unsafe&lt;/code>成为你最后的救命稻草时，你必须知道的6个保命技巧 (冲突+利益点+数字)&lt;/li>
&lt;li>我发誓，这是我见过把&lt;code>unsafe&lt;/code>讲得最骚的一篇！从“删库跑路”到“封神”的正确姿势 (悬念+利益点+夸张)&lt;/li>
&lt;li>解锁Rust的禁忌咒语：&lt;code>unsafe&lt;/code>的正确咏唱方式（内附错误示范，请勿模仿）(悬念+比喻+利益点)&lt;/li>
&lt;/ol>
&lt;p>我个人推荐 &lt;strong>标题1&lt;/strong>，它最符合我“强大、自信、略带调侃”的人设。&lt;/p>
&lt;hr>
&lt;p>&lt;strong>第四步：正文引爆 (第一部分)&lt;/strong>&lt;/p>
&lt;p>任务有点长，我们分步来。这是文章的第一部分，请审阅。&lt;/p>
&lt;hr>
&lt;h3 id="rust的unsafe不是随便玩玩而是生死状盘点6个让你代码原地爆炸的骚操作">Rust的&lt;code>unsafe&lt;/code>不是“随便玩玩”，而是“生死状”！盘点6个让你代码原地爆炸的骚操作&lt;/h3>
&lt;p>朋友，你是否也经历过这样的深夜？&lt;/p>
&lt;p>显示器上，Rust编译器那鲜红的错误提示，像一双无情的大手，死死扼住你项目的喉咙。生命周期、所有权、借用检查……这些平时让你引以为傲的安全卫士，此刻却像一群喋喋不休的唐僧，念得你头皮发麻，只想大喊一声：“闭嘴！”&lt;/p>
&lt;p>就在你万念俱灰，准备砸键盘的前一秒，一个词在你脑海中闪着金光，带着魔鬼的诱惑——&lt;code>unsafe&lt;/code>。&lt;/p>
&lt;p>它看起来那么美，像一个“作弊码”，一个能让所有红线瞬间消失的“上帝模式”开关。你颤抖着敲下这六个字母，把它像一个神圣的结界一样包裹住你那段“问题”代码。&lt;/p>
&lt;p>&lt;code>cargo build&lt;/code>&amp;hellip; 成功了！世界清净了。&lt;/p>
&lt;p>你长舒一口气，感觉自己像个驯服了恶龙的英雄。但你没看到的是，编译器在沉默的背后，留下了一个轻蔑的眼神，仿佛在说：“好吧，你非要这么玩，那接下来出的所有事，你自己扛。”&lt;/p>
&lt;p>&lt;strong>&lt;code>unsafe&lt;/code>：不是免死金牌，而是你签下的“生死状”&lt;/strong>&lt;/p>
&lt;p>让我们先撕掉&lt;code>unsafe&lt;/code>那层“自由奔放”的伪装，直面它残酷的真相。&lt;/p>
&lt;p>在Rust的世界里，&lt;code>unsafe&lt;/code>关键字并不意味着“关闭所有安全检查，大家一起YOLO”。它的真正含义是：&lt;/p>
&lt;p>&lt;strong>“我，这位牛逼的程序员，在此郑重立誓，我将亲自接管这块代码的内存安全。编译器你看不懂的，我懂；你检查不到的，我来保证。如果程序崩溃、内存泄漏、数据错乱，甚至导致服务器爆炸、公司倒闭，都是我一个人的责任。”&lt;/strong>&lt;/p>
&lt;p>看明白了吗？你不是在关闭规则，你是在跟编译器签一份“生死状”。你把胸脯拍得邦邦响，告诉它：“这块地盘我罩着，出事我负责！”&lt;/p>
&lt;p>这就像你开着一辆有全球最顶级自动驾驶系统的汽车。但你嫌它太啰嗦，总在你快要撞墙时自动刹车。于是你手动关掉了所有安全辅助，一脚油门踩到底，笑着说：“还是手动挡开着爽！”&lt;/p>
&lt;p>爽是爽了，但前方是悬崖还是坦途，就全看你自己的技术和运气了。&lt;/p>
&lt;p>大多数时候，我们以为自己是藤原拓海，实际上我们只是刚拿驾照的愣头青。为了避免大家在“秋名山”上翻车，今天，我就带你盘点一下那些开发者最爱犯的&lt;code>unsafe&lt;/code>“作-死-骚-操-作”。&lt;/p>
&lt;p>&lt;strong>第一宗罪：把&lt;code>unsafe&lt;/code>当胶带，封住编译器的嘴&lt;/strong>&lt;/p>
&lt;p>这是最常见，也是最愚蠢的错误。当你搞不定生命周期或者所有权问题时，第一反应不是去理解它，而是简单粗暴地用&lt;code>unsafe&lt;/code>块包起来，让编译器“闭嘴”。&lt;/p>
&lt;p>&lt;strong>犯罪现场复现：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> r: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">i32&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">unsafe&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#f92672">=&lt;/span> std::mem::transmute(&lt;span style="color:#ae81ff">0x123456&lt;/span>&lt;span style="color:#66d9ef">usize&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">println!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{r}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段代码，你用&lt;code>unsafe&lt;/code>强行把一个不知所谓的内存地址 &lt;code>0x123456&lt;/code> “翻译”成了一个 &lt;code>i32&lt;/code> 的引用。编译器被你用&lt;code>unsafe&lt;/code>捂住了嘴，只能眼睁睁地看着你作死。&lt;/p></description></item></channel></rss>