<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Middleware on 梦兽编程</title><link>https://rexai.top/en/tags/middleware/</link><description>Recent content in Middleware on 梦兽编程</description><generator>Hugo -- 0.148.2</generator><language>en</language><copyright>梦兽编程</copyright><lastBuildDate>Thu, 21 Aug 2025 10:00:00 +0800</lastBuildDate><atom:link href="https://rexai.top/en/tags/middleware/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust Async Microservices, Tamed: Rate Limiting, Backpressure, Batching, and Middleware</title><link>https://rexai.top/en/tutorials/rust/rust-async-microservices-traffic-gates-20250820/</link><pubDate>Wed, 20 Aug 2025 10:00:00 +0800</pubDate><guid>https://rexai.top/en/tutorials/rust/rust-async-microservices-traffic-gates-20250820/</guid><description>When traffic surges like a flood, equip your Rust microservices with four gates—rate limiting, backpressure, batching, and middleware—using Tokio + Tower. Keep P99 steady and make speed happen in order.</description></item><item><title>The Middleware Optimization Trick That Made My Node.js Server 40% Faster</title><link>https://rexai.top/en/js-news/nodejs-middleware-optimization-performance-boost/</link><pubDate>Tue, 19 Aug 2025 23:35:58 +0800</pubDate><guid>https://rexai.top/en/js-news/nodejs-middleware-optimization-performance-boost/</guid><description>Learn this middleware design pattern to dramatically boost Node.js performance, reduce latency, and improve scalability without rewriting your code</description></item><item><title>Rust + Axum, from zero to hero: build a high‑performance Web server the LEGO way</title><link>https://rexai.top/en/tutorials/rust/axum-from-zero-to-hero-tutorial/</link><pubDate>Thu, 14 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/en/tutorials/rust/axum-from-zero-to-hero-tutorial/</guid><description>A step‑by‑step Axum guide to build a modern high‑performance Web service: routing, path and query parameters, JSON, shared state, and middleware (tracing, CORS) with complete code samples and best practices.</description></item></channel></rss>