<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Concurrency on 梦兽编程</title><link>https://rexai.top/en/tags/concurrency/</link><description>Recent content in Concurrency on 梦兽编程</description><generator>Hugo -- 0.148.2</generator><language>en</language><copyright>梦兽编程</copyright><lastBuildDate>Thu, 21 Aug 2025 00:00:00 +0800</lastBuildDate><atom:link href="https://rexai.top/en/tags/concurrency/index.xml" rel="self" type="application/rss+xml"/><item><title>Build Your Own Mini Actor Framework: Run Concurrency Like a Coffee Shop</title><link>https://rexai.top/en/tutorials/rust/mini-actor-framework-rust/</link><pubDate>Thu, 21 Aug 2025 00:00:00 +0800</pubDate><guid>https://rexai.top/en/tutorials/rust/mini-actor-framework-rust/</guid><description>A hands-on guide to building a usable mini Actor framework in Rust from scratch: Actor, Addr, spawn, supervise, a simple registry, message passing, and HTTP interaction.</description></item><item><title>Rust unsafe isn’t a toy — it’s a blood oath: 6 YOLO mistakes that will blow up your code</title><link>https://rexai.top/en/tutorials/rust/rust-unsafe-yolo-sao-cao-zuo/</link><pubDate>Wed, 13 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/en/tutorials/rust/rust-unsafe-yolo-sao-cao-zuo/</guid><description>Don’t treat unsafe like a get-out-of-jail-free card. With practical examples, this article dissects 6 common unsafe pitfalls: silencing the compiler with duct tape, dereferencing random raw pointers, violating borrow rules inside unsafe, reinventing wheels, abusing unsafe impl, and skipping Safety comments — helping you build the right risk mindset and usage patterns.</description></item><item><title>Stop treating tokio::spawn as a thread! I launched 1000 tasks in 2 seconds and the system stayed calm</title><link>https://rexai.top/en/tutorials/rust/tokio-spawn-is-not-a-thread/</link><pubDate>Mon, 11 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/en/tutorials/rust/tokio-spawn-is-not-a-thread/</guid><description>tokio::spawn is not a thread but a lightweight task. Under Tokio&amp;#39;s scheduler you build highly concurrent services with sleep, timeout and select — 1000 tasks in 2 seconds with negligible overhead.</description></item><item><title>Rust Async State Machine, Unmasked: How Future, poll, and Waker Really Work</title><link>https://rexai.top/en/tutorials/rust/how-rust-async-state-machine-works-under-the-hood/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/en/tutorials/rust/how-rust-async-state-machine-works-under-the-hood/</guid><description>A practical deep dive into Rust async: why calling an async function doesn&amp;#39;t run it, how the compiler turns async into a state machine, and how executors drive tasks forward with poll and Waker. Understand the real mechanics behind async/await.</description></item></channel></rss>