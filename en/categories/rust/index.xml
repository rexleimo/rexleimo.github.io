<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Rust on 梦兽编程</title><link>https://rexai.top/en/categories/rust/</link><description>Recent content in Rust on 梦兽编程</description><generator>Hugo -- 0.148.2</generator><language>en</language><copyright>梦兽编程</copyright><lastBuildDate>Mon, 11 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://rexai.top/en/categories/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Stop treating tokio::spawn as a thread! I launched 1000 tasks in 2 seconds and the system stayed calm</title><link>https://rexai.top/en/tutorials/rust/tokio-spawn-is-not-a-thread/</link><pubDate>Mon, 11 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/en/tutorials/rust/tokio-spawn-is-not-a-thread/</guid><description>tokio::spawn is not a thread but a lightweight task. Under Tokio&amp;#39;s scheduler you build highly concurrent services with sleep, timeout and select — 1000 tasks in 2 seconds with negligible overhead.</description></item><item><title>Rust Async State Machine, Unmasked: How Future, poll, and Waker Really Work</title><link>https://rexai.top/en/tutorials/rust/how-rust-async-state-machine-works-under-the-hood/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/en/tutorials/rust/how-rust-async-state-machine-works-under-the-hood/</guid><description>A practical deep dive into Rust async: why calling an async function doesn&amp;#39;t run it, how the compiler turns async into a state machine, and how executors drive tasks forward with poll and Waker. Understand the real mechanics behind async/await.</description></item><item><title>Rust 1.89: Intel Macs demoted to Tier 2, clearer lifetimes, and new x86 intrinsics</title><link>https://rexai.top/en/tutorials/rust/rust-1-89-intel-mac-demotion-20250809/</link><pubDate>Sat, 09 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/en/tutorials/rust/rust-1-89-intel-mac-demotion-20250809/</guid><description>Rust 1.89 demotes x86_64-apple-darwin (Intel Mac) from Tier 1 to Tier 2, adds the mismatched_lifetime_syntaxes lint, constant generics &amp;#39;_&amp;#39; inference, and a wave of new x86 intrinsics.</description></item><item><title>Rust Async Unveiled: The Secret to Making Code 'Slack Off' While Doubling Efficiency!</title><link>https://rexai.top/en/tutorials/rust/rust-async-like-a-pro-explained/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>https://rexai.top/en/tutorials/rust/rust-async-like-a-pro-explained/</guid><description>Deep dive into Rust async programming core concepts, from async/await to Future, from tokio runtime to concurrent processing. Master zero-cost async programming essence and double your Rust code efficiency!</description></item></channel></rss>