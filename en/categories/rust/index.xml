<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Rust on 梦兽编程</title><link>https://rexai.top/en/categories/rust/</link><description>Recent content in Rust on 梦兽编程</description><generator>Hugo -- 0.148.2</generator><language>en</language><copyright>梦兽编程</copyright><lastBuildDate>Thu, 21 Aug 2025 10:00:00 +0800</lastBuildDate><atom:link href="https://rexai.top/en/categories/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust Async Microservices, Tamed: Rate Limiting, Backpressure, Batching, and Middleware</title><link>https://rexai.top/en/tutorials/rust/rust-async-microservices-traffic-gates-20250820/</link><pubDate>Wed, 20 Aug 2025 10:00:00 +0800</pubDate><guid>https://rexai.top/en/tutorials/rust/rust-async-microservices-traffic-gates-20250820/</guid><description>When traffic surges like a flood, equip your Rust microservices with four gates—rate limiting, backpressure, batching, and middleware—using Tokio + Tower. Keep P99 steady and make speed happen in order.</description></item><item><title>Rust + Axum Async Microservice Guide: Job Queue, Retries, and Graceful Shutdown</title><link>https://rexai.top/en/tutorials/rust/rust-axum-async-microservice-guide/</link><pubDate>Sun, 17 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/en/tutorials/rust/rust-axum-async-microservice-guide/</guid><description>Build a production-ready async microservice with Rust and Axum: job queue, background workers, exponential backoff retries, and graceful shutdown. Includes full project structure and Docker example.</description></item><item><title>Rust Axum Graceful Shutdown, The Ultimate Guide: Fix the pitfall 99% of engineers hit</title><link>https://rexai.top/en/tutorials/rust/rust-axum-graceful-shutdown-guide/</link><pubDate>Sun, 17 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/en/tutorials/rust/rust-axum-graceful-shutdown-guide/</guid><description>Master graceful shutdown for Rust Axum services: listen for SIGINT/SIGTERM, refuse new connections with with_graceful_shutdown, stop background tasks via CancellationToken, set timeouts, and integrate with Docker/Kubernetes termination — protect data integrity and user experience.</description></item><item><title>Rust + Axum, from zero to hero: build a high‑performance Web server the LEGO way</title><link>https://rexai.top/en/tutorials/rust/axum-from-zero-to-hero-tutorial/</link><pubDate>Thu, 14 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/en/tutorials/rust/axum-from-zero-to-hero-tutorial/</guid><description>A step‑by‑step Axum guide to build a modern high‑performance Web service: routing, path and query parameters, JSON, shared state, and middleware (tracing, CORS) with complete code samples and best practices.</description></item><item><title>Rust unsafe isn’t a toy — it’s a blood oath: 6 YOLO mistakes that will blow up your code</title><link>https://rexai.top/en/tutorials/rust/rust-unsafe-yolo-sao-cao-zuo/</link><pubDate>Wed, 13 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/en/tutorials/rust/rust-unsafe-yolo-sao-cao-zuo/</guid><description>Don’t treat unsafe like a get-out-of-jail-free card. With practical examples, this article dissects 6 common unsafe pitfalls: silencing the compiler with duct tape, dereferencing random raw pointers, violating borrow rules inside unsafe, reinventing wheels, abusing unsafe impl, and skipping Safety comments — helping you build the right risk mindset and usage patterns.</description></item><item><title>Stop treating tokio::spawn as a thread! I launched 1000 tasks in 2 seconds and the system stayed calm</title><link>https://rexai.top/en/tutorials/rust/tokio-spawn-is-not-a-thread/</link><pubDate>Mon, 11 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/en/tutorials/rust/tokio-spawn-is-not-a-thread/</guid><description>tokio::spawn is not a thread but a lightweight task. Under Tokio&amp;#39;s scheduler you build highly concurrent services with sleep, timeout and select — 1000 tasks in 2 seconds with negligible overhead.</description></item><item><title>Rust Async State Machine, Unmasked: How Future, poll, and Waker Really Work</title><link>https://rexai.top/en/tutorials/rust/how-rust-async-state-machine-works-under-the-hood/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/en/tutorials/rust/how-rust-async-state-machine-works-under-the-hood/</guid><description>A practical deep dive into Rust async: why calling an async function doesn&amp;#39;t run it, how the compiler turns async into a state machine, and how executors drive tasks forward with poll and Waker. Understand the real mechanics behind async/await.</description></item><item><title>Rust 1.89: Intel Macs demoted to Tier 2, clearer lifetimes, and new x86 intrinsics</title><link>https://rexai.top/en/tutorials/rust/rust-1-89-intel-mac-demotion-20250809/</link><pubDate>Sat, 09 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/en/tutorials/rust/rust-1-89-intel-mac-demotion-20250809/</guid><description>Rust 1.89 demotes x86_64-apple-darwin (Intel Mac) from Tier 1 to Tier 2, adds the mismatched_lifetime_syntaxes lint, constant generics &amp;#39;_&amp;#39; inference, and a wave of new x86 intrinsics.</description></item><item><title>Rust Async Unveiled: The Secret to Making Code 'Slack Off' While Doubling Efficiency!</title><link>https://rexai.top/en/tutorials/rust/rust-async-like-a-pro-explained/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>https://rexai.top/en/tutorials/rust/rust-async-like-a-pro-explained/</guid><description>Deep dive into Rust async programming core concepts, from async/await to Future, from tokio runtime to concurrent processing. Master zero-cost async programming essence and double your Rust code efficiency!</description></item></channel></rss>