<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>性能 on 梦兽编程</title><link>https://rexai.top/tags/%E6%80%A7%E8%83%BD/</link><description>Recent content in 性能 on 梦兽编程</description><generator>Hugo -- 0.148.2</generator><language>zh-cn</language><copyright>梦兽编程</copyright><lastBuildDate>Wed, 31 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://rexai.top/tags/%E6%80%A7%E8%83%BD/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust异步编程：7个导致性能瓶颈和崩溃的常见错误</title><link>https://rexai.top/tutorials/rust/rust-async-common-mistakes-to-avoid/</link><pubDate>Wed, 31 Jul 2024 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-async-common-mistakes-to-avoid/</guid><description>深入探讨7个常见的Rust异步编程陷阱，如阻塞线程、错误使用锁和未处理的Future。通过实例学习如何避免这些错误，编写高性能、稳定的异步代码。</description></item><item><title>Rust 迭代器懒惰陷阱：代码不执行的 3 大常见原因</title><link>https://rexai.top/tutorials/rust/rust-iterator-lazy-common-mistakes-explained/</link><pubDate>Fri, 26 Jul 2024 12:01:00 +0800</pubDate><guid>https://rexai.top/tutorials/rust/rust-iterator-lazy-common-mistakes-explained/</guid><description>揭秘 Rust 迭代器 3 大懒惰陷阱：map 不执行、过度 collect、into_iter 所有权问题。掌握迭代器最佳实践，避免新手常见错误，写出高性能 Rust 代码。</description></item></channel></rss>