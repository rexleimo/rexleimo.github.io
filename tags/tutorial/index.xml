<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Tutorial on 梦兽编程</title><link>https://rexai.top/tags/tutorial/</link><description>Recent content in Tutorial on 梦兽编程</description><generator>Hugo -- 0.148.2</generator><language>en</language><copyright>梦兽编程</copyright><lastBuildDate>Thu, 19 Dec 2024 10:00:00 +0800</lastBuildDate><atom:link href="https://rexai.top/tags/tutorial/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust Error Handling: A Guide to Result, Option, unwrap(), and expect()</title><link>https://rexai.top/tutorials/rust/rust-error-handling-guide-unwrap-result-option/</link><pubDate>Thu, 19 Dec 2024 10:00:00 +0800</pubDate><guid>https://rexai.top/tutorials/rust/rust-error-handling-guide-unwrap-result-option/</guid><description>A deep dive into Rust&amp;#39;s error handling mechanism, from the pitfalls of unwrap to the elegance of the ? operator. This guide covers core concepts like Result, Option, and panic handling with practical code examples and best practices to help you write safer, more reliable Rust code.</description></item><item><title>Rust Async: 7 Common Mistakes That Kill Performance and Cause Crashes</title><link>https://rexai.top/tutorials/rust/rust-async-common-mistakes-to-avoid/</link><pubDate>Wed, 31 Jul 2024 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-async-common-mistakes-to-avoid/</guid><description>A deep dive into 7 common Rust async programming pitfalls, such as blocking threads, incorrect lock usage, and mishandled Futures. Learn to avoid these mistakes with practical examples to write high-performance, stable asynchronous code.</description></item><item><title>Rust Concurrency Explained: A Guide to Arc, Mutex, and Channels for Thread Safety</title><link>https://rexai.top/tutorials/rust/rust-concurrency-made-easy-with-arc-mutex-channel/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-concurrency-made-easy-with-arc-mutex-channel/</guid><description>Deep dive into Rust&amp;#39;s core concurrency concepts: Arc atomic reference counting, Mutex mutual exclusion, and Channel communication. Learn thread-safe concurrent programming through vivid analogies and practical code examples.</description></item></channel></rss>