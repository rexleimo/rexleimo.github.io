<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Rust on 梦兽编程</title><link>https://rexai.top/tags/rust/</link><description>Recent content in Rust on 梦兽编程</description><generator>Hugo -- 0.148.2</generator><language>en</language><copyright>梦兽编程</copyright><lastBuildDate>Thu, 24 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://rexai.top/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust Lifetimes Explained: From 'a Errors to Mastery, Finally Understand the Borrow Checker</title><link>https://rexai.top/tutorials/rust/rust-lifetime-mistakes/</link><pubDate>Thu, 24 Jul 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-lifetime-mistakes/</guid><description>Still struggling with Rust lifetimes? This article uses a humorous and easy-to-understand approach to help you finally grasp the true meaning of &amp;#39;a, avoid the 5 most common pitfalls for beginners, and master Rust&amp;#39;s borrowing and ownership to get ahead of your peers.</description></item><item><title>Rust Ultimate Guide: 5 Trait &amp; Generic Pitfalls That Will Make Your Colleagues 'Unreachable'</title><link>https://rexai.top/tutorials/rust/rust-traits-and-generics-common-mistakes/</link><pubDate>Mon, 27 Jan 2025 10:00:00 +0800</pubDate><guid>https://rexai.top/tutorials/rust/rust-traits-and-generics-common-mistakes/</guid><description>Deep dive into 5 common Rust Traits and Generics pitfalls, from generic overuse, trait constraint chaos, static vs dynamic dispatch confusion, associated types usage to struct constraint abuse. Master elegant and efficient Rust code.</description></item><item><title>The Ultimate Guide to Rust Error Handling: Say Goodbye to unwrap() and Master Result and Option</title><link>https://rexai.top/tutorials/rust/rust-error-handling-guide-unwrap-result-option/</link><pubDate>Thu, 19 Dec 2024 10:00:00 +0800</pubDate><guid>https://rexai.top/tutorials/rust/rust-error-handling-guide-unwrap-result-option/</guid><description>A deep dive into Rust&amp;#39;s error handling mechanism, from the pitfalls of unwrap to the elegance of the ? operator. This guide covers core concepts like Result, Option, and panic handling with practical code examples and best practices to help you write safer, more reliable Rust code.</description></item><item><title>Rust's Infamous Borrow Checker: Not Your Boss, But Your Best Bodyguard</title><link>https://rexai.top/tutorials/rust/rust-borrow-checker-explained-en/</link><pubDate>Fri, 26 Jul 2024 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-borrow-checker-explained-en/</guid><description>A deep but simple dive into Rust&amp;#39;s core concept: the Borrow Checker. Using a vivid analogy, this article explains ownership, borrowing, and lifetimes, helping you conquer compile errors and master Rust&amp;#39;s safety.</description></item><item><title>Bun vs Rust Performance Showdown: The Newcomer vs The Veteran</title><link>https://rexai.top/js-news/bun-vs-rust-performance-battle/</link><pubDate>Mon, 22 Jul 2024 13:37:00 +0800</pubDate><guid>https://rexai.top/js-news/bun-vs-rust-performance-battle/</guid><description>Which is faster, Bun or Rust? This article uses a real-world URL shortener service benchmark to compare Bun (Elysia) and Rust (Actix) in throughput, latency, and developer experience, helping you choose the right tech stack.</description></item><item><title>Complete Guide to Rust Smart Pointers: Master Box, Rc, and RefCell for Memory Management</title><link>https://rexai.top/tutorials/rust/rust-smart-pointers-explained-fun-way/</link><pubDate>Mon, 15 Jan 2024 10:00:00 +0800</pubDate><guid>https://rexai.top/tutorials/rust/rust-smart-pointers-explained-fun-way/</guid><description>Learn Rust smart pointers through vivid analogies and practical examples. Master Box, Rc, and RefCell to understand Rust&amp;#39;s memory management system effortlessly</description></item></channel></rss>