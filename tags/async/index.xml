<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Async on 梦兽编程</title><link>https://rexai.top/tags/async/</link><description>Recent content in Async on 梦兽编程</description><generator>Hugo -- 0.148.2</generator><language>zh-cn</language><copyright>梦兽编程</copyright><lastBuildDate>Sun, 10 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://rexai.top/tags/async/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust async 状态机揭秘：Future、poll、Waker 到底怎么工作？</title><link>https://rexai.top/tutorials/rust/how-rust-async-state-machine-works-under-the-hood/</link><pubDate>Sun, 10 Aug 2025 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/how-rust-async-state-machine-works-under-the-hood/</guid><description>深入拆解 Rust 异步编程：为什么调用 async 不会立刻执行？Future 本质是怎样的状态机？执行器如何通过 poll 与 Waker 驱动任务前进？一文读懂 async/await 的底层运行机制。</description></item><item><title>Rust异步编程：7个导致性能瓶颈和崩溃的常见错误</title><link>https://rexai.top/tutorials/rust/rust-async-common-mistakes-to-avoid/</link><pubDate>Wed, 31 Jul 2024 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-async-common-mistakes-to-avoid/</guid><description>深入探讨7个常见的Rust异步编程陷阱，如阻塞线程、错误使用锁和未处理的Future。通过实例学习如何避免这些错误，编写高性能、稳定的异步代码。</description></item><item><title>Rust Async内幕：让代码学会摸鱼，效率还能翻倍的秘密！</title><link>https://rexai.top/tutorials/rust/rust-async-like-a-pro-explained/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>https://rexai.top/tutorials/rust/rust-async-like-a-pro-explained/</guid><description>深入解析Rust异步编程的核心概念，从async/await到Future，从tokio运行时到并发处理，掌握零成本异步编程的精髓，让你的Rust代码效率翻倍！</description></item></channel></rss>